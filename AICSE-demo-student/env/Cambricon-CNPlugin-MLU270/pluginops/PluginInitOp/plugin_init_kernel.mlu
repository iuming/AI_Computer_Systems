/*************************************************************************
 * Copyright (C) [2018] by Cambricon, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *************************************************************************/

#define BLOCK 256

#if (__BANG_ARCH__ >= 200 && FLOAT_MODE == 1)
typedef float Dtype;
#define KERNEL_NAME  InitKernel_MLU270_float
#elif (__BANG_ARCH__ >= 200 && FLOAT_MODE == 0)     // NOLINT
typedef half  Dtype;
#define KERNEL_NAME  InitKernel_MLU270_half
#endif


__mlu_entry__ void KERNEL_NAME(Dtype* input, Dtype* output, Dtype value,
                               int size) {
    __nram__ Dtype zero_buffer[BLOCK];

#if FLOAT_MODE == 1
    __nramset_float(zero_buffer, BLOCK, value);
#else
    __nramset_half(zero_buffer, BLOCK, value);
#endif

    int size_ = size / taskDim;
    int last_ = size % taskDim;
    int size_percore = taskId == (taskDim - 1) ? (size_ + last_) : size_;

    int count = size_percore / BLOCK;
    int last_size = size_percore % BLOCK;

    for (int i = 0; i < count; ++i) {
        // because zero_buffer is BLOCK * sizeof(half)
        __memcpy(output + taskId * size_ + BLOCK * i, zero_buffer,
                    BLOCK * sizeof(Dtype), NRAM2GDRAM);
    }
    if (last_size != 0) {
        __memcpy(output + + taskId * size_ + BLOCK * count,
                    zero_buffer, last_size * sizeof(Dtype), NRAM2GDRAM);
    }
}
